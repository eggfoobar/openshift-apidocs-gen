- name: Write Operations
  operation_types:
  - name: Create
    match: create${group}${version}(Namespaced)?${resource}
  - name: Create Eviction
    match: create${group}${version}(Namespaced)?${resource}Eviction
  - name: Patch
    match: patch${group}${version}(Namespaced)?${resource}
  - name: Replace
    match: replace${group}${version}(Namespaced)?${resource}
  - name: Delete
    match: delete${group}${version}(Namespaced)?${resource}
  - name: Delete Collection
    match: delete${group}${version}Collection(Namespaced)?${resource}
- name: Read Operations
  operation_types:
  - name: Read
    match: read${group}${version}(Namespaced)?${resource}
  - name: List
    match: list${group}${version}(Namespaced)?${resource}
  - name: List All Namespaces
    match: list${group}${version}(Namespaced)?${resource}ForAllNamespaces
  - name: Watch
    match: watch${group}${version}(Namespaced)?${resource}
  - name: Watch List
    match: watch${group}${version}(Namespaced)?${resource}List
  - name: Watch List All Namespaces
    match: watch${group}${version}(Namespaced)?${resource}ListForAllNamespaces
- name: Status Operations
  operation_types:
  - name: Patch Status
    match: patch${group}${version}(Namespaced)?${resource}Status
  - name: Read Status
    match: read${group}${version}(Namespaced)?${resource}Status
  - name: Replace Status
    match: replace${group}${version}(Namespaced)?${resource}Status
- name: "Proxy Operations"
  operation_types:
  - name: Create Connect Portforward
    match: connect${group}${version}Post(Namespaced)?${resource}Portforward
  - name: Create Connect Proxy
    match: connect${group}${version}Post(Namespaced)?${resource}Proxy
  - name: Create Connect Proxy Path
    match: connect${group}${version}Post(Namespaced)?${resource}ProxyWithPath
  - name: Create Proxy
#    match: proxy${group}${version}POST(Namespaced)?${resource}
#  - name: Create Proxy Path
#    match: proxy${group}${version}POST(Namespaced)?${resource}WithPath
#  - name: Delete Connect Proxy
    match: connect${group}${version}Delete(Namespaced)?${resource}Proxy
  - name: Delete Connect Proxy Path
    match: connect${group}${version}Delete(Namespaced)?${resource}ProxyWithPath
  # TODO - unused?
#  - name: Delete Proxy
#    match: proxy${group}${version}DELETE(Namespaced)?${resource}
  # TODO - unused?
#  - name: Delete Proxy Path
#    match: proxy${group}${version}DELETE(Namespaced)?${resource}WithPath
  - name: Get Connect Portforward
    match: connect${group}${version}Get(Namespaced)?${resource}Portforward
  - name: Get Connect Proxy
    match: connect${group}${version}Get(Namespaced)?${resource}Proxy
  - name: Get Connect Proxy Path
    match: connect${group}${version}Get(Namespaced)?${resource}ProxyWithPath
  # TODO - unused?
#  - name: Get Proxy
#    match: proxy${group}${version}GET(Namespaced)?${resource}
  # TODO - unused?
#  - name: Get Proxy Path
#    match: proxy${group}${version}GET(Namespaced)?${resource}WithPath
  - name: Head Connect Proxy
    match: connect${group}${version}Head(Namespaced)?${resource}Proxy
  - name: Head Connect Proxy Path
    match: connect${group}${version}Head(Namespaced)?${resource}ProxyWithPath
  - name: Replace Connect Proxy
    match: connect${group}${version}Put(Namespaced)?${resource}Proxy
  - name: Replace Connect Proxy Path
    match: connect${group}${version}Put(Namespaced)?${resource}ProxyWithPath
  # TODO - unused?
#  - name: Replace Proxy
#    match: proxy${group}${version}PUT(Namespaced)?${resource}
  # TODO - unused?
#  - name: Replace Proxy Path
#    match: proxy${group}${version}PUT(Namespaced)?${resource}WithPath
- name: "Misc Operations"
  default: true
  operation_types:
  - name: Read Scale
    match: read${group}${version}(Namespaced)?${resource}Scale
  - name: Replace Scale
    match: replace${group}${version}(Namespaced)?${resource}Scale
  - name: Patch Scale
    match: patch${group}${version}(Namespaced)?${resource}Scale
  - name: Rollback
    match: create${group}${version}(Namespaced)?${resource}Rollback
  - name: Read Log
    match: read${group}${version}(Namespaced)?${resource}Log
